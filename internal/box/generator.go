//go:generate go run generator.go embedded_box/frontend frontend/out
package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

type TemplateData struct {
	PackageName string
	Files       map[string][]byte
}

// Define vars for build template
var conv = map[string]interface{}{"conv": fmtByteSlice}
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package {{ .PackageName }}

// Code generated by go generate; DO NOT EDIT.

import (
	"fmt"
	"strings"

	"github.com/foolin/goview"
)

var Box *EmbeddedBox

type EmbeddedBox struct {
	storage map[string][]byte
}

// Create new box for embed files
func newEmbeddedBox() *EmbeddedBox {
	return &EmbeddedBox{storage: make(map[string][]byte)}
}

// Add a file to box
func (e *EmbeddedBox) Add(file string, content []byte) {
	e.storage[file] = content
}

// Exists checks if a file exists in the box
func (e *EmbeddedBox) Exists(file string) bool {
	_, ok := e.storage[file]
	return ok
}

// Get file's content
func (e *EmbeddedBox) Get(file string) []byte {
	if f, ok := e.storage[file]; ok {
		return f
	}
	return nil
}

// List all files in the box
func (e *EmbeddedBox) List() []string {
    files := make([]string, 0, len(e.storage))
    for k := range e.storage {
        files = append(files, k)
    }

    return files
}

// List all partials in the box
func (e *EmbeddedBox) Partials() []string {
	partials := []string{}
	for file := range e.storage {
		if strings.HasPrefix(file, "partials/") {
			partials = append(partials, strings.TrimSuffix(file, e.Extension()))
		}
	}

	return partials
}

// Extension returns the box template Extension
func (e *EmbeddedBox) Extension() string {
	return ".html"
}

// Root returns the root directory of box
func (e *EmbeddedBox) Root() string {
	return "out"
}

// Delims returns the delimiters which are to be used within the templates
func (e *EmbeddedBox) Delims() goview.Delims {
	return goview.Delims{
		Left: "{{ "{" }}{{ "{" }}",
		Right: "{{ "}" }}{{ "}" }}",
	}
}

// Returns a FileHandler for the goview templating engine against the current box
func (e *EmbeddedBox) GoviewFileHandler() goview.FileHandler {
	return func(config goview.Config, tplFile string) (content string, err error) {
		// get file contents as string
		template := e.Get(tplFile + config.Extension)
		if template == nil {
			return "", fmt.Errorf("Template %s%s not found", tplFile, config.Extension)
		}
		return string(template), nil
	}
}

func init() {
	Box = newEmbeddedBox()

	{{- range $name, $file := .Files }}
		Box.Add("{{ $name }}", []byte{ {{ conv $file }} })
	{{- end }}
}`),
)

func fmtByteSlice(s []byte) string {
	builder := strings.Builder{}

	for _, v := range s {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}

	return builder.String()
}

func main() {
	blobFileName := "../../" + os.Args[1] + "/box.go"
	embedFolder := "../../" + os.Args[2]

	parts := strings.Split(os.Args[1], "/")
	packageName := parts[len(parts)-1]
	fmt.Println(embedFolder)

	// Checking directory with files
	if _, err := os.Stat(embedFolder); os.IsNotExist(err) {
		log.Fatal("Configs directory does not exists!")
	}

	// Create map for filenames
	templateData := TemplateData{
		PackageName: packageName,
		Files:       make(map[string][]byte),
	}

	// Walking through embed directory
	err := filepath.Walk(embedFolder, func(path string, info os.FileInfo, err error) error {
		relativePath := filepath.ToSlash(strings.TrimPrefix(path, embedFolder))
		relativePath = strings.TrimPrefix(relativePath, "/")

		if info.IsDir() {
			// Skip directories
			log.Println(path, "is a directory, skipping...")
			return nil
		} else {
			// If element is a simple file, embed
			log.Println(path, "is a file, packing in...")

			b, err := os.ReadFile(path)
			if err != nil {
				// If file not reading
				log.Printf("Error reading %s: %s", path, err)
				return err
			}

			// Add file name to map
			templateData.Files[relativePath] = b
		}

		return nil
	})
	if err != nil {
		log.Fatal("Error walking through embed directory:", err)
	}

	if err := os.MkdirAll("../../"+os.Args[1], 0755); err != nil {
		log.Fatal("Error creating package directory:", err)
	}

	// Create blob file
	f, err := os.Create(blobFileName)
	if err != nil {
		log.Fatal("Error creating blob file:", err)
	}
	defer f.Close()

	// Create buffer
	builder := &bytes.Buffer{}

	// Execute template
	if err = tmpl.Execute(builder, templateData); err != nil {
		log.Fatal("Error executing template", err)
	}

	// Formatting generated code
	data, err := format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}

	// Writing blob file
	if err = os.WriteFile(blobFileName, data, os.ModePerm); err != nil {
		log.Fatal("Error writing blob file", err)
	}
}
